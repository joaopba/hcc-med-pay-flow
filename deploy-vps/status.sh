#!/bin/bash

# üìä Verifica√ß√£o de Status Completo - HCC Med Pay Flow

DOMAIN="hcc.chatconquista.com"
APP_DIR="/var/www/hcc-med-pay-flow"

# Cores
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
echo -e "${BLUE}‚ïë                üìä STATUS DO SISTEMA HCC                      ‚ïë${NC}"
echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
echo ""

# 1. Informa√ß√µes do Sistema
echo -e "${BLUE}üñ•Ô∏è  SISTEMA${NC}"
echo "   ‚Ä¢ Servidor: $(hostname)"
echo "   ‚Ä¢ Uptime: $(uptime -p)"
echo "   ‚Ä¢ Load: $(uptime | awk -F'load average:' '{print $2}')"
echo "   ‚Ä¢ Mem√≥ria: $(free -h | grep '^Mem:' | awk '{print $3 "/" $2}')"
echo "   ‚Ä¢ Disco: $(df -h / | tail -1 | awk '{print $3 "/" $2 " (" $5 " usado)"}')"
echo ""

# 2. Status dos Servi√ßos
echo -e "${BLUE}‚öôÔ∏è  SERVI√áOS${NC}"
services=("nginx" "ufw")
for service in "${services[@]}"; do
    if systemctl is-active --quiet $service; then
        echo -e "   ‚Ä¢ $service: ${GREEN}‚úÖ Ativo${NC}"
    else
        echo -e "   ‚Ä¢ $service: ${RED}‚ùå Inativo${NC}"
    fi
done
echo ""

# 3. Status da Aplica√ß√£o
echo -e "${BLUE}üöÄ APLICA√á√ÉO${NC}"
if [ -d "$APP_DIR" ]; then
    echo -e "   ‚Ä¢ Diret√≥rio: ${GREEN}‚úÖ Existe${NC}"
    if [ -f "$APP_DIR/index.html" ]; then
        echo -e "   ‚Ä¢ Index.html: ${GREEN}‚úÖ Existe${NC}"
    else
        echo -e "   ‚Ä¢ Index.html: ${RED}‚ùå N√£o encontrado${NC}"
    fi
    
    # Info do deploy
    if [ -f "$APP_DIR/deploy-info.json" ]; then
        deploy_time=$(cat $APP_DIR/deploy-info.json | grep deployed_at | cut -d'"' -f4)
        echo "   ‚Ä¢ √öltimo deploy: $(date -d "$deploy_time" '+%d/%m/%Y √†s %H:%M' 2>/dev/null || echo 'N/A')"
    fi
    
    # Tamanho
    size=$(du -sh $APP_DIR 2>/dev/null | cut -f1)
    echo "   ‚Ä¢ Tamanho: $size"
else
    echo -e "   ‚Ä¢ Diret√≥rio: ${RED}‚ùå N√£o existe${NC}"
fi
echo ""

# 4. Status da Rede
echo -e "${BLUE}üåê CONECTIVIDADE${NC}"

# Verificar portas
if ss -tulpn | grep -q ":80 "; then
    echo -e "   ‚Ä¢ Porta 80 (HTTP): ${GREEN}‚úÖ Aberta${NC}"
else
    echo -e "   ‚Ä¢ Porta 80 (HTTP): ${RED}‚ùå Fechada${NC}"
fi

if ss -tulpn | grep -q ":443 "; then
    echo -e "   ‚Ä¢ Porta 443 (HTTPS): ${GREEN}‚úÖ Aberta${NC}"
else
    echo -e "   ‚Ä¢ Porta 443 (HTTPS): ${YELLOW}‚ö†Ô∏è Fechada${NC}"
fi

# Teste HTTP
echo -n "   ‚Ä¢ Teste HTTP: "
http_code=$(curl -s -o /dev/null -w "%{http_code}" http://$DOMAIN 2>/dev/null || echo "000")
if [[ "$http_code" =~ ^[23] ]]; then
    echo -e "${GREEN}‚úÖ OK ($http_code)${NC}"
else
    echo -e "${RED}‚ùå Falha ($http_code)${NC}"
fi

# Teste HTTPS  
echo -n "   ‚Ä¢ Teste HTTPS: "
https_code=$(curl -s -o /dev/null -w "%{http_code}" https://$DOMAIN 2>/dev/null || echo "000")
if [[ "$https_code" =~ ^[23] ]]; then
    echo -e "${GREEN}‚úÖ OK ($https_code)${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è Falha ($https_code)${NC}"
fi
echo ""

# 5. SSL Certificate
echo -e "${BLUE}üîí CERTIFICADO SSL${NC}"
if [ -f "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" ]; then
    echo -e "   ‚Ä¢ Certificado: ${GREEN}‚úÖ Instalado${NC}"
    
    # Verificar validade
    exp_date=$(openssl x509 -enddate -noout -in "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" 2>/dev/null | cut -d= -f2)
    if [ ! -z "$exp_date" ]; then
        exp_timestamp=$(date -d "$exp_date" +%s 2>/dev/null)
        now_timestamp=$(date +%s)
        days_left=$(( (exp_timestamp - now_timestamp) / 86400 ))
        
        if [ $days_left -gt 30 ]; then
            echo -e "   ‚Ä¢ Validade: ${GREEN}‚úÖ $days_left dias restantes${NC}"
        elif [ $days_left -gt 0 ]; then
            echo -e "   ‚Ä¢ Validade: ${YELLOW}‚ö†Ô∏è $days_left dias restantes${NC}"
        else
            echo -e "   ‚Ä¢ Validade: ${RED}‚ùå Expirado${NC}"
        fi
    fi
else
    echo -e "   ‚Ä¢ Certificado: ${RED}‚ùå N√£o encontrado${NC}"
fi
echo ""

# 6. Logs Recentes
echo -e "${BLUE}üìã LOGS RECENTES${NC}"
echo "   ‚Ä¢ Nginx Access (√∫ltimas 3 linhas):"
tail -3 /var/log/nginx/hcc-app.access.log 2>/dev/null | sed 's/^/     /' || echo "     Nenhum log encontrado"

echo "   ‚Ä¢ Nginx Error (√∫ltimas 3 linhas):"
tail -3 /var/log/nginx/hcc-app.error.log 2>/dev/null | sed 's/^/     /' || echo "     Nenhum erro recente"
echo ""

# 7. Recursos do Sistema
echo -e "${BLUE}üìä RECURSOS${NC}"
echo "   ‚Ä¢ CPU: $(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | sed 's/%us,//')% em uso"
echo "   ‚Ä¢ RAM: $(free | grep '^Mem:' | awk '{printf "%.1f%%", $3/$2 * 100.0}') em uso"
echo "   ‚Ä¢ Swap: $(free | grep '^Swap:' | awk '{if($2>0) printf "%.1f%%", $3/$2 * 100.0; else print "0%"}') em uso"
echo ""

# 8. Firewall
echo -e "${BLUE}üõ°Ô∏è  FIREWALL${NC}"
ufw_status=$(ufw status | head -1)
if echo "$ufw_status" | grep -q "active"; then
    echo -e "   ‚Ä¢ Status: ${GREEN}‚úÖ Ativo${NC}"
else
    echo -e "   ‚Ä¢ Status: ${RED}‚ùå Inativo${NC}"
fi
echo ""

# 9. Sum√°rio Final
echo -e "${BLUE}üìã SUM√ÅRIO${NC}"
overall_status="OK"

# Verificar servi√ßos cr√≠ticos
if ! systemctl is-active --quiet nginx; then
    overall_status="PROBLEMA"
fi

if [ ! -f "$APP_DIR/index.html" ]; then
    overall_status="PROBLEMA"
fi

if [[ ! "$https_code" =~ ^[23] ]] && [[ ! "$http_code" =~ ^[23] ]]; then
    overall_status="PROBLEMA"
fi

if [ "$overall_status" = "OK" ]; then
    echo -e "   ‚Ä¢ Status Geral: ${GREEN}‚úÖ SISTEMA OPERACIONAL${NC}"
else
    echo -e "   ‚Ä¢ Status Geral: ${RED}‚ùå REQUER ATEN√á√ÉO${NC}"
fi

echo ""
echo -e "${BLUE}üîó LINKS √öTEIS${NC}"
echo "   ‚Ä¢ Site: https://$DOMAIN"
echo "   ‚Ä¢ Status: https://$DOMAIN/status"
echo "   ‚Ä¢ Health: https://$DOMAIN/health"
echo ""